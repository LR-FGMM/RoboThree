var RobotCommander = function ( robotId, server, commandTemplate ) {
    this.robotId = robotId;
    this.server = server;
    this.degToRad = function ( v ) { return 180 * v / Math.PI };
    this.radToDeg = function ( v ) { return v * Math.PI / 180 };
    this.commandTemplate = commandTemplate || "wget {server}/exec --post-data '{data}' 2> /dev/null -O -";
    this.cp = require('child_process');
    this.dataOut = {};
    
    var commander = this;
    this.functions = {
        penUp: function () {
            commander.dataOut = {
                command: 'penUp'
            };
            commander.exec();
        },
        penDown: function () {
            commander.dataOut = {
                command: 'penDown'
            };
            commander.exec();
        },
        moveForward: function ( gap ) {
            commander.dataOut = {
                command: 'moveForward',
                parameters: { gap: gap || 1 }
            };
            commander.exec();
        },
        moveBackward: function ( gap ) {
            commander.dataOut = {
                command: 'moveForward',
                parameters: { gap: -gap || -1 }
            };
            commander.exec();
        },
        stop: function () {
            commander.dataOut = {
                command: 'stop'
            };
            commander.exec();
        },
        getHeading: function () {
            commander.dataOut = {
                command: 'getHeading'
            };
            var output = commander.exec();
            var result = JSON.parse( output );
            return commander.degToRad ( result.heading );
        },
        getSpeed: function () {
            commander.dataOut = {
                command: 'getSpeed'
            };
            var output = commander.exec();
            var result = JSON.parse( output );
            return result.speed;
        },
        setSpeed: function ( speed ) {
            commander.dataOut = {
                command: 'setSpeed',
                parameters: { speed: speed }
            };
            commander.exec();
        },
        getSonarMeasure: function ( sonar ) {
            commander.dataOut = {
                command: 'getSonarMeasure',
                parameters: { sonar: sonar }
            };
            var output = commander.exec();
            var result = JSON.parse( output );
            return result.distance;
        },
        isPathLeft: function ( ) {
            return getSonarMeasure( 'left' ) > 20;
        },
        isPathForward: function ( ) {
            return getSonarMeasure( 'front' ) > 20;
        },
        isPathRight: function ( ) {
            return getSonarMeasure( 'right' ) > 20;
        },
    };
    this.exec = function() {
        commander.dataOut.robotId = commander.robotId;
        var sentData = JSON.stringify ( commander.dataOut );
        var receivedData;
        console.log ( "Executing: " + sentData + '...' );
        var command = commander.commandTemplate.replace('{server}', commander.server).replace('{data}', sentData);
        return this.cp.execSync( command ).toString();
    }
}

module.exports = RobotCommander;
