/**
 * @author Loris Tissino / http://loris.tissino.it
 * @package RoboThree
 * @license MIT
 * @see http://www.espruino.com/Reference
*/

var Pin = function ( value ) {
    this._info = { port: value.charAt(0), num: parseInt(value.substr(1)) };
    this._mode = undefined
    this._inputState = undefined;
    this._outputState = undefined;
}

Pin.prototype.getInfo = function getInfo () {
    return this._info;
}

Pin.prototype.getMode = function getMode () {
    return this._mode;
}

Pin.prototype.mode = function mode ( mode ) {
    if ( [
        'analog',
        'input',
        'input_pullup',
        'input_pulldown',
        'output',
        'opendrain',
        'af_output',
        'af_opendrain'
        ].indexOf ( mode ) < 0 ) {
        throw "Mode not allowed";
    }
    
    this._mode = mode;
}

Pin.prototype.read = function read () {
    if ( typeof this.mode === 'undefined' ) {
        this._mode = 'input';
    }
    return this._inputState;
}

Pin.prototype.reset = function reset () {
    this.write ( 0 );
}

Pin.prototype.set = function set () {
    this.write ( 1 );
}

Pin.prototype.write = function write ( value ) {
    if ( typeof this._mode === 'undefined' ) {
        this._mode = 'output';
    }
    this._outputState = value;
}

Pin.prototype.writeAtTime = function writeAtTime ( value, time ) {
    // not implemented
}

Pin.prototype.read = function read ( ) {
    return this._inputState;
}

Pin.prototype.xGetLastOutput = function () {
    return this._outputState;
}

var E = function () {}

E.clip = function (x, min, max) {
    return Math.max(min, Math.min(x, max));
}

exports.Pin = Pin;
exports.E = E;

exports.analogRead = function (pin) {
    return pin.read ( );
}

exports.analogWrite = function (pin, value, options) {
    pin.write ( value );
    // TODO: check whether we should consider the options (probably the value between 0 and 1 will suffice)
}

exports.digitalPulse = function (pin, value, time) {
    throw "Not implemented";
}

exports.digitalRead = function (pin) {
    return pin.read ( );
    // TODO: implement the 'array of pins' signature
}

exports.digitalWrite = function (pin, value) {
    pin.write ( value );
    // TODO: implement the 'array of pins' signature
}

exports.getPinMode = function ( pin ) {
    return pin.getMode();
}

exports.pinMode = function ( pin, mode ) {
    pin.mode( mode );
}

exports.getTime = function () {
    throw "Not implemented";
}

exports.HIGH = 1;

exports.LOW = 0;

exports.print = function ( text ) {
    throw "Not implemented";
}

exports.reset = function () {
    throw "Not implemented";
}

exports.setBusyIndicator = function ( pin ) {
    throw "Not implemented";
}

exports.setDeepSleep = function ( sleep ) {
    throw "Not implemented";
}

exports.changeInterval = function ( id, time ) {
    throw "Not implemented";
}

exports.clearWatch = function ( id ) {
    throw "Not implemented";
}

exports.getSerial = function () {
    throw "Not implemented";
}

exports.setSleepIndicator = function (pin) {
    throw "Not implemented";
}

exports.setTime = function ( time ) {
    throw "Not implemented";
}

exports.setWatch = function ( f, pin, options ) {
    throw "Not implemented";
}

exports.shiftOut = function ( pins, options, data ) {
    throw "Not implemented";
}

